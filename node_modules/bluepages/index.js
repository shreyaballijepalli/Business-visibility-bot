/*
* bluepages v2.0.2
*
* author: thecodesome (https://github.com/thecodesome)
* give feedback: npm.codesome@gmail.com
*
*/

var xpath = require('xpath')
  , domParser = require('xmldom').DOMParser
  , nodegrass = require('nodegrass')
  , ldap = require('ldapjs');

const ldapConfig = {
  options : {
    url :'ldap://bluepages.ibm.com'
  },
  baseDN : 'ou=bluepages,o=ibm.com',
  usernameAttribute : 'mail',
  groupMemberAttribute: 'uniquemember'
}

const allowedAttributes = [
  'preferredidentity',
  'serialnumber',
  'uid',
  'jobresponsibilities',
  'managerserialnumber',
  'dept',
  'employeecountrycode',
  'employeetype',
  'ismanager',
  'mobile',
  'co'
];

const allowedAttributesCheck = { 
  "preferredidentity": true,
  "serialnumber": true,
  "uid": true,
  "jobresponsibilities": true,
  "managerserialnumber": true,
  "dept": true,
  "employeecountrycode": true,
  "employeetype": true,
  "ismanager": true,
  "mobile": true,
  "co": true 
};

const extraAttributes = [
  'firstname',
  'lastname',
  'name'
];

function authenticate(intranetId,password,callback){
 // return callback(false,true);
  if(intranetId && password && callback){
    var ldapClient = ldap.createClient(ldapConfig.options);
    var opts = {
      filter: ldapConfig.usernameAttribute+'='+intranetId,
      scope: 'sub',
      attributes: ['dn']
    };
    var userFound=false;
    ldapClient.search(ldapConfig.baseDN,opts, function(err, result) {
      result.on('searchEntry', function(entry) {
        if(!userFound) {
          userFound=true;
          var bindParams=entry['dn'];
          ldapClient.bind(bindParams, password, function(err) {
            if(err) {
              callback(false,false);
            } else {
              callback(false,true);
            }
          });
        }
      });
      result.on('searchReference', function(referral) {
        console.log('referral: ' + referral.uris.join());
      });
      result.on('error', function(err) {
        callback(err,false);
      });
      result.on('end', function(result) {
        if(!userFound) {
          callback(false,false);
        }
      });
    });
  } else {
    var error = new Error('Invalid arguments');
    if(!callback) console.log(error);
    else callback(error,false);
  }

}

function authenticateGroup(intranetId,groupName,callback){
  if(intranetId && groupName && callback){
    var ldapClient = ldap.createClient(ldapConfig.options);
    var opts = {
      filter: ldapConfig.usernameAttribute+'='+intranetId,
      scope: 'sub',
      attributes: ['dn']
    };
    var userFound = false;
    var checkedInGroup = false;
    ldapClient.search(ldapConfig.baseDN,opts, function(err, result) {

      result.on('searchEntry', function(entry) {
        if(!userFound) {
          userFound=true;
          var bindParams=entry['dn'];
          var opts = {
            filter: ldapConfig.groupMemberAttribute+'='+bindParams,
            scope: 'sub',
            attributes: ['dn']
          };
          ldapClient.search('cn='+groupName+',ou=memberlist,ou=ibmgroups,o=ibm.com',opts, function(err, result) { // for admin group
            result.on('searchEntry', function(entry) {
              checkedInGroup = true;
              callback(false,true);
            });
            result.on('searchReference', function(referral) {
                console.log('referral: ' + referral.uris.join());
            });
            result.on('error', function(err) {
              console.error('admin error: ' + err.message);
              callback(err,false);
            });
            result.on('end', function(result) {
              console.log('status: ' + result.status);
              if(!checkedInGroup){
                checkedInGroup = true;
                callback(false,false);
              }
            });
          });

        }
      });

      result.on('searchReference', function(referral) {
        console.log('referral: ' + referral.uris.join());
      });

      result.on('error', function(err) {
        console.error('error: ' + err.message);
        callback(err,false);
      });

      result.on('end', function(result) {
        if(!userFound && !checkedInGroup) {
          callback(false,false);
        }
      });
    });
  } else {
    var error = new Error('Invalid arguments');
    callback(error,false);
  }
}

function checkIfUserExists(intranetId,callback){
  if(intranetId && callback){
    var ldapClient = ldap.createClient(ldapConfig.options);
    var opts = {
      filter: ldapConfig.usernameAttribute+'='+intranetId,
      scope: 'sub',
      attributes: ['dn']
    };
    var userFound=false;
    ldapClient.search(ldapConfig.baseDN,opts, function(err, result) {
      result.on('searchEntry', function(entry) {
        if(!userFound) {
          userFound=true;
          callback(false,userFound);
        }
      });
      result.on('searchReference', function(referral) {
        console.log('referral: ' + referral.uris.join());
      });
      result.on('error', function(err) {
        callback(err,false);
      });
      result.on('end', function(result) {
        if(!userFound) {
          callback(false,userFound);
        }
      });
    });
  } else {
    var error = new Error('Invalid arguments');
    if(!callback) console.log(error);
    else callback(error,false);
  }
}

function getUserInfo(userData,options,callback){
  if(userData && options && options.constructor==Array && callback){
    if(userData.email){
      startProcess('preferredidentity='+userData.email);
    } else if(userData.uid){
      startProcess('uid='+userData.uid);
    } else {
      var error = new Error('Invalid first argument');
      callback(error,false);
    }
    function startProcess(query){
      if(!options || options.length <= 0){
        options = allowedAttributes.slice();
        for(i in extraAttributes){
          options.push(extraAttributes[i]);
        }
      }
      nodegrass.get("http://bluepages.ibm.com/BpHttpApisv3/slaphapi?ibmperson/"+query+".list/byxml", function(xmlData,status,headers){
        var parsedData = new domParser().parseFromString(xmlData);
        var result = {};
        if(xpath.select('//attr',parsedData).length > 0){
          if(options.indexOf('name') != -1){
            result['name'] = xpath.select("//attr[@name='givenname']/value",parsedData)[0].firstChild.data + ' ' + xpath.select("//attr[@name='sn']/value",parsedData)[0].firstChild.data;
          }
          if(options.indexOf('firstname') != -1){
            result['firstname'] = xpath.select("//attr[@name='givenname']/value",parsedData)[0].firstChild.data;
          }
          if(options.indexOf('lastname') != -1){
            result['lastname'] = xpath.select("//attr[@name='sn']/value",parsedData)[0].firstChild.data;
          }
          for(var i=0 ; i<options.length ; i++){
            if(allowedAttributesCheck[options[i]]){
              if(xpath.select("//attr[@name='"+options[i]+"']",parsedData).length > 0){
                result[options[i]] = xpath.select("//attr[@name='"+options[i]+"']/value/text()",parsedData)[0].data ;
              } else {
                result[options[i]] = '';
              }
            }
          }
          callback(false,result);
        } else {
          var error = new Error('User does not exist');
          callback(error,result);
        }
      },'utf8').on('error', function(e) {
        callback(e,false);
      });
    }
  } else {
    var error = new Error('Invalid arguments');
    if(!callback) console.log(error);
    else callback(error,false);
  }
}

function getImageByIntranetId(intranetId,callback){
  if(intranetId && callback) {
    getUserInfo({email:intranetId},['uid'],function(err,data){
      if(!err && data.uid && data.uid!=""){
        var imageURL = 'http://faces.tap.ibm.com:10000/image/'+ data.uid +'.jpg' ;
        callback(false,imageURL);
      } else {
        var error = new Error('Invalid intranetId');
        callback(error,false);
      }
    });
  } else {
    var error = new Error('Invalid arguments');
    if(!callback) console.log(error);
    else callback(error,false);
  }
}

function getEmployeesOf(managerData,options,callback){
  if(managerData && options && callback){
    if(managerData.email){
      getUserInfo({email:managerData.email},['uid','employeecountrycode'],function(err,data){
        if(!err && data.uid && data.employeecountrycode){
          startEmployeeSearch(data.uid.slice(0,-3),data.employeecountrycode)
        } else {
          var error = new Error('Invalid email');
          callback(error,false);
        }
      });
    } else if(managerData.uid){
      getUserInfo({uid:managerData.uid},['uid','employeecountrycode'],function(err,data){
        if(!err && data.uid && data.employeecountrycode){
          startEmployeeSearch(data.uid.slice(0,-3),data.employeecountrycode)
        } else {
          var error = new Error('Invalid uid');
          callback(error,false);
        }
      });
    } else {
      var error = new Error('Invalid first argument');
      callback(error,false);
    }
    function startEmployeeSearch(managerserialnumber,countrycode){
      if(!options || options.length <= 0){
        options = allowedAttributes.slice();
        for(i in extraAttributes){
          options.push(extraAttributes[i]);
        }
      }
      nodegrass.get("http://bluepages.ibm.com/BpHttpApisv3/slaphapi?ibmperson/managerserialnumber=" + managerserialnumber + ".list/byxml", function(xmlData,status,headers){
        xmlData = xmlData.toString();
        var flag = true;
        var entries = [];
        var index_1 , index_2;
        while(flag){
          var index_1 = xmlData.indexOf('<entry');
          if(index_1==-1) flag = false;
          else {
            index_2 = xmlData.indexOf('</entry>') + 8;
            entries.push(xmlData.slice(index_1,index_2));
            xmlData = xmlData.substr(0,index_1) + xmlData.substr(index_2);
          }
        }

        var parsedData;
        var result = []
           ,tempObject;

        var nameFlag = (options.indexOf('name') != -1)
           ,firstnameFlag = (options.indexOf('firstname') != -1)
           ,lastnameFlag = (options.indexOf('lastname') != -1);
        for (var i = 0; i < entries.length; i++){
          parsedData = new domParser().parseFromString(entries[i]);
          if(countrycode==xpath.select("//attr[@name='employeecountrycode']/value/text()",parsedData)[0].data){
            tempObject = {};
            if(nameFlag){
              tempObject['name'] = xpath.select("//attr[@name='givenname']/value",parsedData)[0].firstChild.data + ' ' + xpath.select("//attr[@name='sn']/value",parsedData)[0].firstChild.data;
            }
            if(firstnameFlag){
              tempObject['firstname'] = xpath.select("//attr[@name='givenname']/value",parsedData)[0].firstChild.data;
            }
            if(lastnameFlag){
              tempObject['lastname'] = xpath.select("//attr[@name='sn']/value",parsedData)[0].firstChild.data;
            }
            for(var j=0 ; j<options.length ; j++){
              if(allowedAttributesCheck[options[j]]){
                if(xpath.select("//attr[@name='"+options[j]+"']/value/text()",parsedData).length > 0){
                  tempObject[options[j]] = xpath.select("//attr[@name='"+options[j]+"']/value/text()",parsedData)[0].data ;
                } else {
                  tempObject[options[j]] = '';
                }
              }
            }
            result.push(tempObject);
          }
        }
        callback(false,result);
      },'utf8').on('error', function(e) {
        callback(e,false);
      });
    }
  } else {
    var error = new Error('Invalid arguments');
    if(!callback) console.log(error);
    else callback(error,false);
  }
}

function getOrganisationOf(userData,callback){
  if(userData && callback){
    var targets = []
       ,secondaryTargets = []
       ,result = []
       ,i;
    if(userData.uid){
      targets.push(userData.uid);
      i = 0;
      startEmployeeSearch();
    } else if(userData.email){
      getUserInfo({email:userData.email},['uid'],function(err,data){
        if(!err && data.uid){
          targets.push(data['uid']);
          i = 0;
          startEmployeeSearch();
        } else {
          var error = new Error('Invalid email');
          callback(error,false);
        }
      });
    } else {
      var error = new Error('Invalid first argument');
      callback(error,false);
    }

    function startEmployeeSearch(){
        getEmployeesOf({uid:targets[i]},['firstname','lastname','name','preferredidentity','uid','ismanager'],function(err,data){
          if(!err){
            for(var j=0 ; j<data.length ; j++){
              result.push(data[j]);
              if(data[j]['ismanager'] == 'Y'){
                secondaryTargets.push(data[j]['uid']);
              }
            }
            if(++i >= targets.length){
              if(secondaryTargets.length > 0){
                targets = secondaryTargets.slice();
                secondaryTargets = [];
                setImmediate(function(){
                  i = 0;
                  startEmployeeSearch();
                });
              } else {
                setImmediate(function(){
                  callback(false,result);
                });
              }
            } else {
              setImmediate(function(){
                startEmployeeSearch();
              });
            }
          } else {
            callback(err,false);
          }
        });
    }
  } else {
    var error = new Error('Invalid arguments');
    if(!callback) console.log(error);
    else callback(error,false);
  }
}

function getEmployeesByDept(dept,options,callback){
  if(dept && dept.constructor==String && dept!='' && options && options.constructor==Array && callback){
      if(options.length <= 0){
        options = allowedAttributes.slice();
        for(i in extraAttributes){
          options.push(extraAttributes[i]);
        }
      }
      nodegrass.get("http://bluepages.ibm.com/BpHttpApisv3/slaphapi?ibmperson/dept=" + dept + ".list/byxml", function(xmlData,status,headers){
        xmlData = xmlData.toString();
        var flag = true;
        var entries = [];
        var index_1 , index_2;
        while(flag){
          var index_1 = xmlData.indexOf('<entry');
          if(index_1==-1) flag = false;
          else {
            index_2 = xmlData.indexOf('</entry>') + 8;
            entries.push(xmlData.slice(index_1,index_2));
            xmlData = xmlData.substr(0,index_1) + xmlData.substr(index_2);
          }
        }

        var parsedData;
        var result = []
           ,tempObject;
        var nameFlag = (options.indexOf('name') != -1)
           ,firstnameFlag = (options.indexOf('firstname') != -1)
           ,lastnameFlag = (options.indexOf('lastname') != -1);
        for (var i = 0; i < entries.length; i++){
          parsedData = new domParser().parseFromString(entries[i]);
          tempObject = {};
          if(nameFlag){
            tempObject['name'] = xpath.select("//attr[@name='givenname']/value",parsedData)[0].firstChild.data + ' ' + xpath.select("//attr[@name='sn']/value",parsedData)[0].firstChild.data;
          }
          if(firstnameFlag){
            tempObject['firstname'] = xpath.select("//attr[@name='givenname']/value",parsedData)[0].firstChild.data;
          }
          if(lastnameFlag){
            tempObject['lastname'] = xpath.select("//attr[@name='sn']/value",parsedData)[0].firstChild.data;
          }
          for(var j=0 ; j<options.length ; j++){
            if(allowedAttributesCheck[options[j]]){
              if(xpath.select("//attr[@name='"+options[j]+"']/value/text()",parsedData).length > 0){
                tempObject[options[j]] = xpath.select("//attr[@name='"+options[j]+"']/value/text()",parsedData)[0].data ;
              } else {
                tempObject[options[j]] = '';
              }
            }
          }
          result.push(tempObject);
        }
        callback(false,result);
      },'utf8').on('error', function(e) {
        callback(e,false);
      });
  } else {
    var error = new Error('Invalid arguments');
    if(!callback) console.log(error);
    else callback(error,false);
  }
}
module.exports.authenticate = authenticate;
module.exports.authenticateGroup = authenticateGroup;
module.exports.checkIfUserExists = checkIfUserExists;
module.exports.getUserInfo = getUserInfo;
module.exports.getImageByIntranetId = getImageByIntranetId;
module.exports.getEmployeesOf = getEmployeesOf;
module.exports.getOrganisationOf = getOrganisationOf;
module.exports.getEmployeesByDept = getEmployeesByDept;
